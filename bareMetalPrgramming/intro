Bare Metal programming

- link : "https://www.embedded.com/design/mcus-processors-and-socs/4007119/Building-Bare-Metal-ARM-Systems-with-GNU-Part-1--Getting-Started"

    - use GNU C/C++ toolchain
    - bare metal ARM system with essential features
    - emphasis on WHY behind each component - GREAT !
    - detail analysis of individual elements and fine-tuning stuff
    - structure
        . features needed
        . generic startup code
        . matching linker script
        . low-level initializaton
        . compiler options
        . basic board support package(BSP)
        
        . interrupt handling
            * interrupt locking policy 
            * interrupt handling in the presence of a prioratised interrupt controller 
            * IRQ 7 FIQ assembly "wrapper" as well as other ARm exception handlers
            * testing strategy for various preemptions scenarious
    - necessesities for bare metal programming 
        * has 2 operating states
            - ARM state which executes 32bit word aligned ARm instructions
            - thumb state which operates in 16bit half-word aligned thumb instructions
        * various CPU modes according to visibility of registers - USER, SYSTEM, SUPERVISOR, ABORT. UNDEFINED, IRQ and FIQ
        * in addition to above most ARM proc provide ARM vector remapping and a vector specific interrupt controller which allows nesting of nesting of IRQ interrupts.
        
        
    - bare minimum that is needed
        . Supprot for ARM vector remapping :
            performed early in the boot process; a necessary evil(evil as source of great confusion)
        . low-level intialization in C/C++ :
            like clock intialization, external bus interface config etc; no need for assembly progr; easier in c/c++ and has to happen before main()
        . Executing code from RAM : 
            code from SRAM used for better performance; how to setup the copyong process and linker scripts for the same
         . mixing ARM and THUMB instructio set
         . stack section
         . debug and release configurtions
         . support for c++
         . minimising the impact of c++
         . ARM exceptions and interrupt handling
        
